Binary Tree Datastructure:

1.) The maximum number of nodes at level l: 2^(l-1)
2.) The maximum number of nodes at height h: 2^h-1
3.) In a Binary Tree with N nodes, minimum possible height or minimum number of levels is  ? Log2(N+1) ?   
4.) A Binary Tree with L leaves has at least   ? Log2L ? + 1   levels

Traversal:
1.) Inorder traversal: 
    Traverse the left sub-tree: call inorder(left-subtree)
    Visit the root
    Traverse the right sub-tree: call inorder(right-subtree)

2.) Preorder traversal:
    Visit the root
    Traverse the left sub-tree: call preorder(left-subtree)
    Traverse the right sub-tree: call preorder(right-subtree)
    
3.) Postorder traversal:
    Traverse the left subtree: call Postorder(left-subtree)
    Traverse the right subtree: call Postorder(right-subtree)
    Visit the root.

Time complexity of traversal:
    T(n)= T(k)+ T(n-k-1)+c
    k is the number of nodes on one side of the root and (n-k-1) is the number of nodes on the other side of the root.
    Assume corner case: k=0
    T(n)= T(0)+ T(n-1)+c
    T(n)= 2T(0)+ T(n-2)+c
    T(n)= 3T(0)+ T(n-3)+c.... T(n)= nT(0)+d
    T(0) will be some constant. Hence, T(n)= n(c+d)
    Hence time complexity: O(n)